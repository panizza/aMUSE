from ajaxutils.decorators import ajax
from django.contrib.auth.models import User
from .helpers import save_image
from django.shortcuts import get_object_or_404
from django.forms.models import model_to_dict
from basetyzer.models import Item, Tag, Experience, Photo, Scan, Action,\
    Comment

@ajax(require="GET")
def get_item(request, id_item):
    """ Provides information regarding a specific object identified by id
    """
    item = get_object_or_404(Item, pk=id_item)
    item_json = model_to_dict(item, exclude=['exhibit'])
    item_json['tag'] = model_to_dict(Tag.objects.get(pk=int(item_json['tag'])))
    item_json['photo'] = item_json['photo'].url
    return item_json

@ajax(require="POST")
def save_visit(request):

    """data = {"exp": [{"date": "2013-03-12 14:46:10","photo": "",
                     "text": "bingo bongo","type": "personal"},
                    {"id": "1","date": "2013-03-12 14:46:10","photo": "",
                     "text": "woow","type":"scan"},
                    {"id": "2","date": "2013-03-12 14:46:10",
                     "photo": "","text": "","type": "scan"},
                    {"date": "2013-03-12 14:46:10",
                     "photo":"","text":"vermi!","type":"personal"}],"confirm": "44221100","email": "gpinelli@excite.it"}
    """
    data = request.data
    email = data['email']
    confirm = data['confirm']
    experience = data['exp']
    user, created = User.objects.get_or_create(username=email, email=email)
    my_experience = Experience.objects.create(user=user)
    for exp in experience:
        action = Action()
        action.date_performed = exp['date']
        action.experience = my_experience
        if exp['type'] == 'scan':
            item = Item.objects.get(id=exp['id'])
            scan = Scan.objects.create(content=item)
            action.scan = scan
        if not exp.get('photo', '') == '':
            name, content = save_image(exp['photo'])
            photo = Photo()
            photo.content.save(name,content)
            action.photo = photo

        if not exp.get('text', '') == '':
            comment = Comment.objects.create(content=exp['text'])
            action.comment = comment
        action.save()


